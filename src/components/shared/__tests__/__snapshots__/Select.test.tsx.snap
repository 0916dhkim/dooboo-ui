// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`[Select] render renders without crashing 1`] = `
<View>
  <View
    accessible={true}
    clickable={true}
    isTVSelectable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
    testID="undefined-touchable-opacity"
  >
    <View
      onLayout={[Function]}
      style={
        Array [
          Object {
            "alignItems": "center",
            "backgroundColor": "#ffffff",
            "elevation": 1,
            "flexDirection": "row",
            "height": 48,
            "justifyContent": "space-between",
            "paddingBottom": 14,
            "paddingLeft": 6,
            "paddingRight": 6,
            "paddingTop": 14,
            "shadowColor": "#5364ff",
            "shadowOpacity": 0.5,
            "shadowRadius": 5,
            "width": 128,
          },
          null,
        ]
      }
      testID="undefined-root-select"
      theme="none"
    >
      <Text
        style={
          Array [
            Object {
              "color": "#09071d",
              "fontSize": 14,
            },
            null,
          ]
        }
        testID="undefined-root-text"
        theme="none"
      >
        
      </Text>
      <Image
        source={
          Object {
            "testUri": "../../../icons/ic_arr_down.png",
          }
        }
        testID="undefined-root-arrow"
      />
    </View>
  </View>
  <Modal
    hardwareAccelerated={false}
    onRequestClose={[Function]}
    transparent={true}
    visible={false}
  >
    <View
      style={
        Array [
          Object {
            "elevation": 8,
            "shadowColor": "#5364ff",
            "shadowOpacity": 0.2,
          },
          Object {
            "display": "none",
            "left": 0,
            "shadowOffset": Object {
              "height": 5,
              "width": 0,
            },
            "top": 0,
            "width": 0,
          },
        ]
      }
      testID="undefined-select-list-view"
    >
      <View
        accessible={true}
        clickable={true}
        isTVSelectable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "height": 0,
            "opacity": 1,
            "width": "100%",
          }
        }
        testID="undefined-modal-close-view"
      />
      <RCTScrollView
        disableVirtualization={false}
        getItem={[Function]}
        getItemCount={[Function]}
        horizontal={false}
        initialNumToRender={10}
        keyExtractor={[Function]}
        maxToRenderPerBatch={10}
        numColumns={1}
        onContentSizeChange={[Function]}
        onEndReachedThreshold={2}
        onLayout={[Function]}
        onMomentumScrollEnd={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        removeClippedSubviews={false}
        renderItem={[Function]}
        scrollEventThrottle={50}
        stickyHeaderIndices={Array []}
        style={
          Array [
            Object {
              "backgroundColor": "#ffffff",
              "paddingTop": 8,
            },
          ]
        }
        updateCellsBatchingPeriod={50}
        viewabilityConfigCallbackPairs={Array []}
        windowSize={21}
      >
        <View />
      </RCTScrollView>
    </View>
  </Modal>
</View>
`;
